<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>Actually, less is more!</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 28 Dec 2018 16:21:17 +0800</pubDate>
    <lastBuildDate>Fri, 28 Dec 2018 16:21:17 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>mac windows as 和 idea 加载gradle 本地配置</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#第一步&quot; id=&quot;markdown-toc-第一步&quot;&gt;第一步&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#第二步&quot; id=&quot;markdown-toc-第二步&quot;&gt;第二步&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#第三步&quot; id=&quot;markdown-toc-第三步&quot;&gt;第三步&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#第四步&quot; id=&quot;markdown-toc-第四步&quot;&gt;第四步&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#第五步&quot; id=&quot;markdown-toc-第五步&quot;&gt;第五步&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#第六步&quot; id=&quot;markdown-toc-第六步&quot;&gt;第六步&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#第七步&quot; id=&quot;markdown-toc-第七步&quot;&gt;第七步&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;本文是为了解决gradle升级下载慢，导致浪费不必要的等待时间！&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;第一步&quot;&gt;第一步&lt;/h2&gt;
&lt;p&gt;window–&amp;gt;对应的gradle配置的目录路径为 administration目录下的.gradle目录
mac     –&amp;gt;对应的gradle配置的目录路径 /用户/电脑名/.gradle，例如：~/.gradle（本文以mac配置为主）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/6370809-a11d14e82043afe5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;小提醒:此处对应gradle配置的具体路径&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;第二步&quot;&gt;第二步&lt;/h2&gt;
&lt;p&gt;mac–&amp;gt;由于.gradle目录在mac上是默认隐藏的，这时候就需要在Finder上使用快捷键 command + shift + g 接入上图中标注的具体目录&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/6370809-a5a7d0ee2183ed2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;command + shift + g&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/6370809-46b256191783b233.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;利用快捷键进入gradle对应配置目录&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;第三步&quot;&gt;第三步&lt;/h2&gt;
&lt;p&gt;mac–&amp;gt; 此目录下的/wrapper/dists目录即为as or idea 下载的gradle存放的目录，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/6370809-0accfcd34e5bfaf2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;第四步&quot;&gt;第四步&lt;/h2&gt;
&lt;p&gt;在gradle 无法下载对应的gradle版本的时候， 内部的压缩文件都是未下载完全的，这时候需要到对应的gradle版本目录下，将完整的对应的gradle版本的压缩文件copy到此目录下，替换未下载完全的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/6370809-d52336d55ff0387b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;未下载完全的gradle 版本下的文件&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;第五步&quot;&gt;第五步&lt;/h2&gt;
&lt;p&gt;在gradle官网[https://gradle.org/releases/] 使用迅雷下载 as or idea 下载不下来的对应的gradle版本压缩文件。&lt;/p&gt;

&lt;h2 id=&quot;第六步&quot;&gt;第六步&lt;/h2&gt;
&lt;p&gt;将下载下来的压缩文件替换当前对应版本下的未下载完全的压缩包，然后打开编译器，这时候就会直接解压你下载的压缩包了&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;小坑：此处有坑，需知，必须确保你下载的压缩包版本一致，其次是替换之前未
下载完全的gradle压缩包，别先自作主张删了这个压缩包，因为你下载的压缩包文
件可能会命名与as 和 idea读取压缩包的名称不同，此处bug水很深，可以让你怀
疑人生！
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;第七步&quot;&gt;第七步&lt;/h2&gt;
&lt;p&gt;gradle 指令的环境变量需要手动配置，window系统和配置java环境变量是一样的道理，mac 配置如下所示：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;sudo vim ~/.bash_profile&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;vim 指令快捷键–&amp;gt; i == insert  ， esc ==  exit , :wq == 保存并退出vim编辑器&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;vim 编辑器下， i 键进入insert 文本操作，文本内容如下：&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/6370809-e8e9b04415381030.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;gradle mac 环境变量配置 &amp;amp; 此处配置了adb环境，请注意区分&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;保存退出vim编辑器&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;source ~/.bash_profile –&amp;gt;确保该指令在终端未报错，无任何异常输出，表示基本pash语法配置正确&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;gradle -version –&amp;gt;运行gradle指令查看版本，确定环境路径配置完整。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;若觉得配置gradle指令环境比较麻烦，在idea or as 构建的project 目录下都有默认的.gradle 目录，可以使用 ./gradlew 指令代替gradle指令，非全局，终端不可运行&lt;/strong&gt;
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/6370809-01d690aebbe1327b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;project下默认的./gradlew&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;此处有坑--&amp;gt;请注意：./gradlew +指令 ，可能会报权限错误，这时候需要运行
chmod +x gradlew --&amp;gt;允许运行gradlew指令。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Tue, 07 Nov 2017 13:47:00 +0800</pubDate>
        <link>http://localhost:4000/2017/11/07/gradle-%E6%9C%AC%E5%9C%B0%E5%8D%87%E7%BA%A7/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/11/07/gradle-%E6%9C%AC%E5%9C%B0%E5%8D%87%E7%BA%A7/</guid>
        
        <category>gradle本地替换升级</category>
        
        
        <category>gradle</category>
        
      </item>
    
      <item>
        <title>android gradle加载配置文件参数</title>
        <description>
&lt;p&gt;此文只是简单的通过配置变量的方式实现配置信息之间的切换，除去了频繁更改地址、开关、AppKey等其它的配置信息。&lt;/p&gt;

&lt;p&gt;本篇文章简单的使用了gradle的生命周期，有兴趣的童鞋可以自行百度了解一下。&lt;/p&gt;

&lt;p&gt;一般android studio刚创建的project的setting.gradle文件只包括一行：&lt;/p&gt;

&lt;p&gt;这一行的意思是构建mutiProject，按照正常的逻辑来说，其实android studio创建的每个module都算是一个单独的Project，而gradle通过构建此文件，将这些项目统一构建为mutiProject。&lt;/p&gt;

&lt;p&gt;gradle的构建过程简单理解如下所示:&lt;/p&gt;

&lt;p&gt;setting.gradle文件只有一份，这也就意味着整个mutiProject的gradle对象只有一份，它可以在任何project的gradle文件当中获取到这个对象。&lt;/p&gt;

&lt;p&gt;build.gradle文件有多份，每个module下存在于单个build.gradle文件，这就意味着，每个module都具备单独的project对象，这就意味着每个module都是一个单独的project。&lt;/p&gt;

&lt;p&gt;setting.gradle文件对应着gradle对象的初始化，那一般的初始化操作可以在此gradle脚本文件当中运行，但不要原始生成的include标签抹去，这是gradle构建mutiProject关键所在。&lt;/p&gt;

&lt;p&gt;首先，我在项目当中配置了debug.properties以及release.properties,这两个文件：&lt;/p&gt;

&lt;p&gt;第二步，在gradle.properties文件当中定义一个boolean值IS_RELEASE_MODE，这个变量就是加载配置了debug和release两个版本的配置文件的开关，如果有多种配置信息的，请改用字符串定义变量。，true表示Release参数，false代表debug参数。&lt;/p&gt;

&lt;p&gt;注：此处不得不说一下，gradle.properties文件当中的属性，我暂且这样理解为，在setting.gradle文件初始化gradle对象的时候，这个文件当中的属性已经默认加载到这个gradle对象当中，所以这个文件当中定义的属性是可以直接调用。&lt;/p&gt;

&lt;p&gt;第三步，setting.gradle当中读取文件当中定义属性代码展示如下（请配合参考groovy语言，$符是脚本语言的通用处理符号）&lt;/p&gt;

&lt;p&gt;同时，如果想后期读取自己定义的properties文件，这时候就需要用来gradle对象的扩展属性，对于gradle的扩展属性是通过gradle.ext标识符来完成的，特别声明，gradle.ext.属性名只需要在第一次赋值的时候需要带上ext标签，在后面的过程可以直接gradle.属性名进行任意的更改和取值。&lt;/p&gt;

&lt;p&gt;调用读取配置文件的方法&lt;/p&gt;

&lt;p&gt;基本参数配置完毕，可以通过gradle指令（gradlew clean指令就可观察对应扩展属性的值）在IS_RELEASE_MODE=true的情况下，输出如下所示。&lt;/p&gt;

&lt;p&gt;如果诸位童鞋觉得这个指令等待时间过长，那就自定义一个task，运行指令如上图所示，task的代码块是定义在project 类当中，所以只能在build.gradle文件当中进行配置：&lt;/p&gt;

&lt;p&gt;以上gradle的ext扩展属性对应配置脚本信息已经完毕。而这里需要解释的是上文当中有两种读取配置文件属性的处理方式，下文会具体指出其中需要注意的地方。&lt;/p&gt;

&lt;p&gt;第四步，在依赖的最顶层的libray 当中的build.gradle中做如下配置，为什么说要在最顶层的libray当中做这个配置，这是由于每个project（也就是as当中的module）都会在build当中生成对应自己build.gradle当中配置的BuildConfig.java类，所以，把这些配置信息放到最顶层的库，是为了其它依赖者也能够公用这个库的BuildConfig.java类。具体配置如下：&lt;/p&gt;

&lt;p&gt;gradle编译完毕之后会在当前build.gradle对应的project的build目录下生成BuildConfig类：&lt;/p&gt;

&lt;p&gt;同时，在gradle.properties当中将IS_RELEASE_MODE=false，BuildConfig编译完毕之后就能完成debug.properties文件属性值的切换。&lt;/p&gt;

&lt;p&gt;到了这个地方，按照以上步骤走，基本上可以解决多个版本配置信息之间的切换了。但上面提到的两种属性处理方式，在这里，我就通过未定义到BuildConfig的TEST7 属性来说明具体原因，这个点具体如下所示，如果我将TEST5采用非字符串的处理方式，BuildConfig如下所示：&lt;/p&gt;

&lt;p&gt;这就导致BuildConfig.java文件默认报错，我想大家还有一种比较简单的处理方式，那就是在配置文件当中直接对需要加在字符串的直接加上字符串就行了，我为了统一性，采用代码控制了这个问题，为了配置文件的属性的统一性。&lt;/p&gt;

&lt;p&gt;下面单独说下这个TEST7属性的处理方式：在第三方sdk当中经常有&lt;meta-data&gt;&lt;/meta-data&gt;标签形式定义的APP_KEY模式，这个就可以通过android 代码块中的maniPlaceHolder实现。&lt;/p&gt;

&lt;p&gt;manifestPlaceHolders可以在androidManifest.xml文件当中读取定义的属性&lt;/p&gt;

&lt;p&gt;Manifest文件通过manifestPlaceHolders获取gradle定义的属性
我想大家已经get到这个TEST7使用的点了，对，没错，它一般用于和AndroidManifest.xml完成变量的交互，它采用非字符串读取方式的处理方式，那是因为在默认加载到AndroidManifest.xml中的这个变量会被处理为字符串格式，也可以简单理解，系统内部已经做了字符串的添加操作，这时候再来一次的话，就会导致清单文件的这个变量读取成带字符串的值，这会导致第三方SDK或其它情况的错误。（请注意，有兴趣的同学可以按照字符串方式处理，然后反编译，可以很清楚的在清单配置文件当中看到这个变量的value值。）&lt;/p&gt;

&lt;p&gt;demo指向，能用代码说话，就别说废话了–https://github.com/kaycool/EnvironmentConfigDemo&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Jun 2017 14:44:00 +0800</pubDate>
        <link>http://localhost:4000/2017/06/09/gradle-%E9%85%8D%E7%BD%AE/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/06/09/gradle-%E9%85%8D%E7%BD%AE/</guid>
        
        <category>gradle配置</category>
        
        
        <category>gradle</category>
        
      </item>
    
  </channel>
</rss>
